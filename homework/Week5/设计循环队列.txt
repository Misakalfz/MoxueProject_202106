class MyCircularQueue {
    private int[] queue;
    private int front;
    private int rear;
    private int size;

    public MyCircularQueue(int k) {
        queue = new int[k];
        front = -1;
        rear = -1;
        size = k;

    }
    
    public boolean enQueue(int value) {
        if(rear == (front + 1) % size){
            return false;
        }
        else{
            if (front == - 1 && rear == -1){
                rear = 0;
            }
            front = (front + 1) % size;
            queue[front] = value;
            return true;
        }

    }
    
    public boolean deQueue() {
        if (front == -1){
            return false;
        }
        queue[rear] = 0;
        if (rear == front){
            rear = -1;
            front = -1;
        }
        else{
            rear = (rear + 1) % size;
        }
        return true;

    }
    
    public int Front() {
        if(front == -1){
            return -1;
        }
        return queue[rear];


    }
    
    public int Rear() {
        if(front == -1){
            return -1;
        }
        return queue[front];

    }
    
    public boolean isEmpty() {
        if (front == -1){
            return true;
        }
        else{
            return false;
        }

    }
    
    public boolean isFull() {
        if ((front + 1) % size == rear){
            return true;
        }
        else{
            return false;
        }

    }
}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */